{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","editors","emotion","hack","window","addEventListener","onPageLoad","updateSize","state","mode","editorCode","editorOutput","editorArguments","editorGeneratedOpen","interpreterCode","interpreterArguments","interpreterOutput","decompilerProgram","toolsRemoveNewlines","loaded","param","URL","location","searchParams","get","this","decodeState","then","engine","time","performance","now","default","console","log","setState","keywords","getOpcodes","tokens","suggestions","push","keyword","isValidOpcode","suffix","startsWith","replace","label","insertText","kind","languages","CompletionItemKind","Constant","Function","setMonarchTokensProvider","tokenizer","root","registerCompletionItemProvider","provideCompletionItems","encodeState","url","set","history","replaceState","obj","undefined","btoa","encodeURIComponent","JSON","stringify","parse","decodeURIComponent","atob","layout","output","execute","interpret","monaco","editor","defineTheme","base","inherit","rules","token","foreground","register","id","code","length","injectStateUrl","reload","result","compiled","compile","program","baseUrl","protocol","host","pathname","endsWith","codepageUrl","tryItUrl","getCodeBytes","explanation","line","join","bytes","options","selectOnLineNumbers","automaticLayout","optionsArguments","minimap","enabled","optionsDisabled","readOnly","Fragment","Grid","container","direction","spacing","style","height","item","Typography","variant","xs","width","language","theme","value","onChange","event","editorWillMount","mutateEditor","alignItems","padding","Button","size","color","onClick","runCodeEditor","selectedValue","open","onClose","generateStackExchange","args","runCodeInterpreter","decompile","rows","opcode","TableRow","key","TableCell","getOpcodeDescription","Paper","Table","TableHead","TableBody","index","getCodepage","character","toString","gutterBottom","TextField","multiline","fullWidth","margin","target","content","getInterpreterContent","getEditorContent","getReferenceContent","getDecompileContent","getCodepageContent","getToolsContent","buttons","updateMode","CssBaseline","AppBar","position","Toolbar","noWrap","justify","Component","GeneratedAnswer","handleClose","other","classes","Dialog","aria-labelledby","DialogTitle","React","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6gCAqBA,IAuoBeA,E,YA/nBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KALRC,QAAU,GAIS,EAHnBC,QAAU,KAGS,EAFnBC,KAAO,KAILC,OAAOC,iBAAiB,QAAQ,kBAAM,EAAKC,gBAC3CF,OAAOC,iBAAiB,UAAU,kBAAM,EAAKE,gBAE7C,EAAKC,MAAQ,CACXC,KAAM,WACNC,WAAY,GACZC,aAAc,GACdC,gBAAiB,GACjBC,qBAAqB,EACrBC,gBAAiB,GACjBC,qBAAsB,GACtBC,kBAAmB,GACnBC,kBAAmB,GACnBC,oBAAqB,GACrBC,QAAQ,GAhBO,E,kFAqBjB,IACMC,EADM,IAAIC,IAAIjB,OAAOkB,UACTC,aAAaC,IAAI,SACrB,OAAVJ,GACFK,KAAKC,YAAYN,K,mCAIP,IAAD,OAEX,mCAAsEO,MAAK,SAAAC,GACzE,IAAMC,EAAOC,YAAYC,MAOzB,GANAH,EAAOI,UACPC,QAAQC,IAAI,qBAAuBJ,YAAYC,MAAQF,GAAQ,kBAC/D,EAAK3B,QAAUE,OAAOF,QACtB,EAAKiC,SAAS,CACZhB,QAAQ,IAEO,MAAb,EAAKhB,KAAc,CACrB,IAAMiC,EAAW,EAAKlC,QAAQmC,aACxBC,EAAS,GACTC,EAAc,GAEpBH,EAASI,KAAK,QALO,2BAMrB,YAAoBJ,EAApB,+CAA8B,CAAC,IAAtBK,EAAqB,QAC5B,GAAK,EAAKC,cAAcD,GAAxB,CAGA,IAAME,EAASF,EAAQG,WAAW,QAAU,GAAK,IACjDN,EAAOE,KAAK,CAAC,UAAYC,EAAQI,QAAQ,sBAAuB,QAAUF,EAAQ,YAClFJ,EAAYC,KAAK,CACfM,MAAOL,EACPM,WAAYN,EACZO,KAAkB,SAAZP,EAAqB,EAAKtC,KAAK8C,UAAUC,mBAAmBC,SAAW,EAAKhD,KAAK8C,UAAUC,mBAAmBE,aAfnG,kFAkBrB,EAAKjD,KAAK8C,UAAUI,yBAAyB,QAAS,CACpDC,UAAW,CACTC,KAAMjB,KAGV,EAAKnC,KAAK8C,UAAUO,+BAA+B,QAAS,CAC1DC,uBAAwB,WACtB,MAAO,CACLlB,YAAaA,Y,oCAQXE,GACZ,QAAIA,EAAQG,WAAW,WAAaH,EAAQG,WAAW,UAAYH,EAAQG,WAAW,WAAaH,EAAQG,WAAW,a,uCAOtH,IAAMpC,EAAQiB,KAAKiC,YAAYjC,KAAKjB,OAC9BmD,EAAM,IAAItC,IAAIjB,OAAOkB,UAC3BqC,EAAIpC,aAAaqC,IAAI,QAASpD,GAC9BJ,OAAOyD,QAAQC,aAAa,YAAa,GAAIH,K,kCAGnCnD,GACV,IAAIuD,OAAMC,EACV,OAAQxD,EAAMC,MACZ,IAAK,WACHsD,EAAM,CACJrD,WAAYF,EAAME,WAClBE,gBAAiBJ,EAAMI,iBAEzB,MACF,IAAK,cACHmD,EAAM,CACJjD,gBAAiBN,EAAMM,gBACvBC,qBAAsBP,EAAMO,sBAE9B,MACF,QACEgD,EAAM,GAIV,OADAA,EAAItD,KAAOD,EAAMC,KACVwD,KAAKC,mBAAmBC,KAAKC,UAAUL,O,kCAGpCvD,GACViB,KAAKU,SAAL,KACKgC,KAAKE,MAAMC,mBAAmBC,KAAK/D,S,mCAI5B,IAAD,uBACX,YAAqBiB,KAAKxB,QAA1B,+CAAmC,SAC1BuE,UAFE,qF,sCAOX,GAAI/C,KAAKjB,MAAMW,OAAQ,CACrB,IAAMsD,EAAShD,KAAKvB,QAAQwE,QAAQjD,KAAKjB,MAAME,WAAYe,KAAKjB,MAAMI,iBACtEa,KAAKU,SAAS,CACZxB,aAAc8D,O,2CAMlB,GAAIhD,KAAKjB,MAAMW,OAAQ,CACrB,IAAMsD,EAAShD,KAAKvB,QAAQyE,UAAUlD,KAAKjB,MAAMM,gBAAiBW,KAAKjB,MAAMO,sBAC7EU,KAAKU,SAAS,CACZnB,kBAAmByD,O,mCAKZG,GACXnD,KAAKtB,KAAOyE,EACZA,EAAOC,OAAOC,YAAY,UAAW,CACnCC,KAAM,KACNC,SAAS,EACTC,MAAO,CACL,CAAEC,MAAO,UAAWC,WAAY,aAGpCP,EAAO3B,UAAUmC,SAAS,CACxBC,GAAI,Y,mCAIKC,GACX,OAAO,YAAIA,GAAMC,S,iCAGR9E,GAKP,OAHAgB,KAAKjB,MAAMC,KAAOA,EAClBgB,KAAK+D,sBACLpF,OAAOkB,SAASmE,W,8CASlB,IAAKhE,KAAKjB,MAAMW,OACd,MAAO,GAET,IAAMuE,EAAS,GACTC,EAAWlE,KAAKvB,QAAQ0F,QAAQnE,KAAKjB,MAAME,YACjD,QAAyBsD,IAArB2B,EAASE,QAAuB,CAClC,IAAIC,EAAU1F,OAAOkB,SAASyE,SAAW,KAAO3F,OAAOkB,SAAS0E,KAAO5F,OAAOkB,SAAS2E,SAClFH,EAAQI,SAAS,OACpBJ,GAAW,KAEb,IAAMK,EAAcL,EAAU,UAAYrE,KAAKiC,YAAY,CAAEjD,KAAM,aAC7D2F,EAAWN,EAAU,UAAYrE,KAAKiC,YAAY,CAAEjD,KAAM,cAAeK,gBAAiB6E,EAASE,QAAS9E,qBAAsBU,KAAKjB,MAAMI,kBACnJ8E,EAAOlD,KAAK,mBAAqBf,KAAK4E,aAAaV,EAASE,SAAW,eACvEH,EAAOlD,KAAK,IACZkD,EAAOlD,KAAK,OAASmD,EAASE,SAC9BH,EAAOlD,KAAK,eACZkD,EAAOlD,KAAK,IAXsB,2BAYlC,YAAmBmD,EAASW,YAA5B,+CAAyC,CAAC,IAA/BC,EAA8B,QACvCb,EAAOlD,KAAK,OAAS+D,IAbW,kFAelCb,EAAOlD,KAAK,IACZkD,EAAOlD,KAAK,uBACZkD,EAAOlD,KAAK,IACZkD,EAAOlD,KAAK,IACZkD,EAAOlD,KAAK,+CACZkD,EAAOlD,KAAK,UAAY2D,GACxBT,EAAOlD,KAAK,UAAY4D,QAExBV,EAAOlD,KAAK,4BAEd,OAAOkD,EAAOc,KAAK,Q,yCAGD,IAAD,OACblB,EAAO7D,KAAKjB,MAAME,WAClBgF,EAAS,yBACTe,EAAQ,EACZ,GAAIhF,KAAKjB,MAAMW,OAAQ,CACrB,IAAMU,EAAOC,YAAYC,MACnB4D,EAAWlE,KAAKvB,QAAQ0F,QAAQN,GACtCI,EAASC,EAASlB,YACOT,IAArB2B,EAASE,UACXY,EAAQhF,KAAK4E,aAAaV,EAASE,UAErC5D,QAAQC,IAAI,qBAAuBJ,YAAYC,MAAQF,GAAQ,kBAGjE,IAAM6E,EAAU,CAAEC,qBAAqB,EAAMC,iBAjOzB,GAkOdC,EAAgB,KAAQH,EAAR,CAAiBI,QAAS,CAAEC,SAAS,KACrDC,EAAe,KAAQH,EAAR,CAA0BI,UAAU,IACzD,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAAGC,MAAO,CAAEC,OAAQ,SAC9D,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,SACSlB,EADT,YAIF,kBAACU,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,QAAQC,MAAM,UAC9DC,MAAO1C,EACPoB,QAASA,EACTuB,SAAU,SAACD,EAAOE,GAChB,EAAK/F,SAAS,CACZzB,WAAYsH,KAGhBG,gBAAiB,SAACtD,GAAD,OAAY,EAAKuD,aAAavD,OAGnD,6BACA,kBAACsC,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAIF,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,OAAOC,MAAM,UAC7DC,MAAOtC,EACPgB,QAASM,KAGb,6BACA,kBAACG,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAACT,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAO,CAAEC,OAAQ,SAC/B,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAACT,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAAGC,MAAO,CAAEC,OAAQ,SAC9D,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMgB,WAAW,SAASf,QAAS,EAAGC,MAAO,CAAEe,QAAS,IAChF,kBAACnB,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAIF,kBAACR,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACc,EAAA,EAAD,CAAQC,KAAK,QAAQb,QAAQ,YAAYc,MAAM,UAAUC,QAAS,kBAAM,EAAKC,kBAA7E,aAIF,kBAACxB,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACc,EAAA,EAAD,CAAQC,KAAK,QAAQb,QAAQ,YAAYc,MAAM,YAAYC,QAAS,WAClE,EAAKvG,SAAS,CACZtB,qBAAqB,MAFzB,6BAUN,kBAACsG,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,OAAOC,MAAM,UAC7DC,MAAOvG,KAAKjB,MAAMG,aAClB+F,QAASM,OAKjB,kBAACG,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAACT,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAAGC,MAAO,CAAEC,OAAQ,SAC9D,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMgB,WAAW,SAASf,QAAS,EAAGC,MAAO,CAAEe,QAAS,IAChF,kBAACnB,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBAMN,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,OAAOC,MAAM,UAC7DC,MAAOvG,KAAKjB,MAAMI,gBAClB8F,QAASG,EACToB,SAAU,SAACD,EAAOE,GAChB,EAAK/F,SAAS,CACZvB,gBAAiBoH,aAUnC,kBAAC,EAAD,CACEY,cAAenH,KAAKjB,MAAMoI,cAC1BC,KAAMpH,KAAKjB,MAAMK,oBACjBiI,QAAS,WACP,EAAK3G,SAAS,CACZtB,qBAAqB,KAGzBmH,MAAO,kBAAM,EAAKe,8B,8CAMD,IAAD,OAChBzD,EAAO7D,KAAKjB,MAAMM,gBAClBkI,EAAOvH,KAAKjB,MAAMO,qBAGlB0F,EAAQhF,KAAK4E,aAAaf,GAE1BoB,EAAU,CAAEC,qBAAqB,EAAMC,iBAxVzB,GAyVdC,EAAgB,KAAQH,EAAR,CAAiBI,QAAS,CAAEC,SAAS,KACrDC,EAAe,KAAQH,EAAR,CAA0BI,UAAU,IACzD,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAAGC,MAAO,CAAEC,OAAQ,SAC9D,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,SACSlB,EADT,YAIF,kBAACU,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,QAAQC,MAAM,UAC9DC,MAAO1C,EACPoB,QAASA,EACTuB,SAAU,SAACD,EAAOE,GAChB,EAAK/F,SAAS,CACZrB,gBAAiBkH,KAGrBG,gBAAiB,SAACtD,GAAD,OAAY,EAAKuD,aAAavD,OAGnD,6BACA,kBAACsC,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAIF,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,OAAOC,MAAM,UAC7DC,MAAOgB,EACPtC,QAASG,EACToB,SAAU,SAACD,EAAOE,GAChB,EAAK/F,SAAS,CACZpB,qBAAsBiH,QAK9B,6BACA,kBAACb,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMgB,WAAW,SAASf,QAAS,EAAGC,MAAO,CAAEe,QAAS,IAChF,kBAACnB,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAIF,kBAACR,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACc,EAAA,EAAD,CAAQC,KAAK,QAAQb,QAAQ,YAAYc,MAAM,UAAUC,QAAS,kBAAM,EAAKO,uBAA7E,eAMN,kBAAC9B,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,OAAOC,MAAM,UAC7DC,MAAOvG,KAAKjB,MAAMQ,kBAClB0F,QAASM,S,4CAQE,IAAD,OAChB1B,EAAO7D,KAAKjB,MAAMS,kBAClByE,EAAS,yBACTjE,KAAKjB,MAAMW,SACbuE,EAASjE,KAAKvB,QAAQgJ,UAAU5D,IAGlC,IAAMoB,EAAU,CAAEC,qBAAqB,EAAMC,iBAjazB,GAkadC,EAAgB,KAAQH,EAAR,CAAiBI,QAAS,CAAEC,SAAS,KACrDC,EAAe,KAAQH,EAAR,CAA0BI,UAAU,IACzD,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAS,EAAGC,MAAO,CAAEC,OAAQ,SAC9D,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,YAIF,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,OAAOC,MAAM,UAC7DC,MAAO1C,EACPoB,QAASA,EACTuB,SAAU,SAACD,EAAOE,GAAR,OAAkB,EAAK/F,SAAS,CACxClB,kBAAmB+G,KAErBG,gBAAiB,SAACtD,GAAD,OAAY,EAAKuD,aAAavD,OAGnD,6BACA,kBAACsC,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBAIF,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACX,kBAAC,IAAD,CAAcC,MAAM,OAAOL,OAAO,OAAOM,SAAS,QAAQC,MAAM,UAC9DC,MAAOtC,EACPgB,QAASM,S,4CASnB,IAAMmC,EAAO,GACb,GAAI1H,KAAKjB,MAAMW,OAAQ,CAAC,IAAD,uBACrB,YAAmBM,KAAKvB,QAAQmC,aAAhC,+CAA8C,CAAC,IAAtC+G,EAAqC,QACvC3H,KAAKiB,cAAc0G,IAGxBD,EAAK3G,KACH,kBAAC6G,EAAA,EAAD,CAAUC,IAAKF,GACb,kBAACG,EAAA,EAAD,KACGH,GAEH,kBAACG,EAAA,EAAD,KACG9H,KAAKvB,QAAQsJ,qBAAqBJ,OAXtB,wFAgBrBD,EAAK3G,KACH,kBAAC6G,EAAA,EAAD,CAAUC,IAAI,WACZ,kBAACC,EAAA,EAAD,gBAGA,kBAACA,EAAA,EAAD,+CAKN,OACE,6BACE,kBAAC7B,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,MAAO,CAAEkB,MAAO,SAAzC,qBADF,0JAKE,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACN,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,sBAGJ,kBAACK,EAAA,EAAD,KACGT,Q,2CASX,IAAMA,EAAO,GACb,GAAI1H,KAAKjB,MAAMW,OAAQ,CACrB,IAAI0I,EAAQ,EADS,uBAErB,YAAsBpI,KAAKvB,QAAQ4J,cAAnC,+CAAkD,CAAC,IAA1CC,EAAyC,QAChDZ,EAAK3G,KACH,kBAAC6G,EAAA,EAAD,CAAUC,IAAKS,GACb,kBAACR,EAAA,EAAD,KACGM,GAEH,kBAACN,EAAA,EAAD,UACKM,EAAMG,SAAS,KAEpB,kBAACT,EAAA,EAAD,KACGQ,KAGPF,KAfmB,wFAkBrBV,EAAK3G,KACH,kBAAC6G,EAAA,EAAD,CAAUC,IAAI,WACZ,kBAACC,EAAA,EAAD,yBAKN,OACE,6BACE,kBAAC7B,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,MAAO,CAAEkB,MAAO,SAAzC,YAGA,kBAACf,EAAA,EAAD,CAAYC,QAAQ,KAAKsC,cAAY,GAArC,uEAGA,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACN,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,WACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,oBAGJ,kBAACK,EAAA,EAAD,KACGT,Q,wCAQM,IAAD,OAChB,OACE,6BACE,kBAACzB,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAGA,kBAACuC,EAAA,EAAD,CACE7E,GAAG,oBACHvC,MAAM,aACNkF,MAAOvG,KAAKjB,MAAMU,oBAClBiJ,WAAS,EACTC,WAAS,EACTC,OAAO,SACP1C,QAAQ,WACRM,SAAU,SAACC,GACT,EAAK/F,SAAS,CACZjB,oBAAqBgH,EAAMoC,OAAOtC,MAAMnF,QAAQ,MAAO,e,+BAQzD,IAAD,OACPpB,KAAK+D,iBAEL,IAAI+E,EAAU,KACd,OAAQ9I,KAAKjB,MAAMC,MACjB,IAAK,cACH8J,EAAU9I,KAAK+I,wBACf,MACF,IAAK,WACHD,EAAU9I,KAAKgJ,mBACf,MACF,IAAK,YACHF,EAAU9I,KAAKiJ,sBACf,MACF,IAAK,QACHH,EAAU9I,KAAKkJ,sBACf,MACF,IAAK,WACHJ,EAAU9I,KAAKmJ,qBACf,MACF,IAAK,QACHL,EAAU9I,KAAKoJ,kBAQnB,IAFA,IACMC,EAAU,GA5BT,aA6BF,IAAIrK,EAAI,KACXqK,EAAQtI,KACN,kBAAC2E,EAAA,EAAD,CAAMM,MAAI,EAAC6B,IAAK7I,GACd,kBAAC8H,EAAA,EAAD,CAAQZ,QAAQ,WAAWa,KAAK,QAAQC,MAAM,UAAUlB,MAAO,CAAEkB,MAAO,SAAWC,QAAS,kBAAM,EAAKqC,WAAWtK,KAC/GA,MAJT,MAFc,CAAC,cAAe,WAAY,QAAS,QAAS,YAAa,YAEzE,eAAyB,IAUzB,OACE,yBAAK8G,MAAO,CAAEC,OAAQ,SACpB,kBAACwD,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAChE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGe,WAAW,UACrC,kBAAClB,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKc,MAAM,UAAU2C,QAAM,GAA/C,YAIDN,KAIP,kBAAC3D,EAAA,EAAD,CAAMC,WAAS,EAACiE,QAAQ,SAAS9D,MAAO,CAAEe,QAAS,GAAId,OAAQ,QAC7D,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACG,IAAE,GACV2C,S,GA5nBKe,aAsoBZC,E,YACJ,WAAYvL,GAAQ,IAAD,8BACjB,4CAAMA,KAGRwL,YAAc,WACZ,EAAKxL,MAAM8I,QAAQ,EAAK9I,MAAM4I,gBALb,E,sEAQT,IAAD,EAC+CnH,KAAKzB,MAAfyL,GADrC,EACCC,QADD,EACU5C,QADV,EACmBF,cADnB,sDAGP,OACE,kBAAC+C,EAAA,EAAD,eAAQvB,WAAS,EAACtB,QAASrH,KAAK+J,YAAaI,kBAAgB,uBAA0BH,GACrF,kBAACI,EAAA,EAAD,CAAaxG,GAAG,uBAAhB,kCACA,yBAAKkC,MAAO,CAAEe,QAAS,KACrB,kBAAC4B,EAAA,EAAD,CACE7E,GAAG,oBACHvC,MAAM,WACNqH,WAAS,EACTC,WAAS,EACTC,OAAO,SACP1C,QAAQ,WACRK,MAAOvG,KAAKzB,MAAMgI,gB,GAvBA8D,IAAMR,WClpBhBS,QACW,cAA7B3L,OAAOkB,SAAS0K,UAEe,UAA7B5L,OAAOkB,SAAS0K,UAEhB5L,OAAOkB,SAAS0K,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7K,MAAK,SAAA8K,GACjCA,EAAaC,kB","file":"static/js/main.b41c4399.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport MonacoEditor from 'react-monaco-editor';\r\n\r\nconst automaticLayout = false;\r\nconst forcePageReladSinceTheEditorSucksAndHasSuperAnnoyingIssuesWithAutomaticResize = true;\r\n\r\nclass App extends Component {\r\n  editors = [];\r\n  emotion = null;\r\n  hack = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    window.addEventListener(\"load\", () => this.onPageLoad());\r\n    window.addEventListener(\"resize\", () => this.updateSize());\r\n\r\n    this.state = {\r\n      mode: \"compiler\",\r\n      editorCode: \"\",\r\n      editorOutput: \"\",\r\n      editorArguments: \"\",\r\n      editorGeneratedOpen: false,\r\n      interpreterCode: \"\",\r\n      interpreterArguments: \"\",\r\n      interpreterOutput: \"\",\r\n      decompilerProgram: \"\",\r\n      toolsRemoveNewlines: \"\",\r\n      loaded: false\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    const url = new URL(window.location);\r\n    const param = url.searchParams.get(\"state\");\r\n    if (param !== null) {\r\n      this.decodeState(param);\r\n    }\r\n  }\r\n\r\n  onPageLoad() {\r\n    // eslint-disable-next-line import/no-webpack-loader-syntax\r\n    import('exports-loader?main!../../target/generated/js/teavm/classes').then(engine => {\r\n      const time = performance.now();\r\n      engine.default();\r\n      console.log(\"Engine init took \" + (performance.now() - time) + \" milliseconds.\")\r\n      this.emotion = window.emotion;\r\n      this.setState({\r\n        loaded: true\r\n      });\r\n      if (this.hack != null) {\r\n        const keywords = this.emotion.getOpcodes();\r\n        const tokens = [];\r\n        const suggestions = [];\r\n\r\n        keywords.push(\"load\");\r\n        for (let keyword of keywords) {\r\n          if (!this.isValidOpcode(keyword)) {\r\n            continue;\r\n          }\r\n          const suffix = keyword.startsWith(\"load\") ? \"\" : \"$\";\r\n          tokens.push([\"^(\\\\s*)\" + keyword.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + suffix, \"keyword\"]);\r\n          suggestions.push({\r\n            label: keyword,\r\n            insertText: keyword,\r\n            kind: keyword === \"load\" ? this.hack.languages.CompletionItemKind.Constant : this.hack.languages.CompletionItemKind.Function\r\n          })\r\n        }\r\n        this.hack.languages.setMonarchTokensProvider(\"elang\", {\r\n          tokenizer: {\r\n            root: tokens\r\n          }\r\n        });\r\n        this.hack.languages.registerCompletionItemProvider(\"elang\", {\r\n          provideCompletionItems: () => {\r\n            return {\r\n              suggestions: suggestions\r\n            };\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  isValidOpcode(keyword) {\r\n    if (keyword.startsWith(\"UNUSED\") || keyword.startsWith(\"load \") || keyword.startsWith(\"sdr 0x\") || keyword.startsWith(\"ldr 0x\")) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  injectStateUrl() {\r\n    const state = this.encodeState(this.state);\r\n    const url = new URL(window.location);\r\n    url.searchParams.set(\"state\", state);\r\n    window.history.replaceState(\"statedata\", \"\", url);\r\n  }\r\n\r\n  encodeState(state) {\r\n    let obj = undefined;\r\n    switch (state.mode) {\r\n      case \"compiler\":\r\n        obj = {\r\n          editorCode: state.editorCode,\r\n          editorArguments: state.editorArguments\r\n        };\r\n        break;\r\n      case \"interpreter\":\r\n        obj = {\r\n          interpreterCode: state.interpreterCode,\r\n          interpreterArguments: state.interpreterArguments\r\n        };\r\n        break;\r\n      default:\r\n        obj = {};\r\n        break;\r\n    }\r\n    obj.mode = state.mode;\r\n    return btoa(encodeURIComponent(JSON.stringify(obj)));\r\n  }\r\n\r\n  decodeState(state) {\r\n    this.setState({\r\n      ...JSON.parse(decodeURIComponent(atob(state)))\r\n    });\r\n  }\r\n\r\n  updateSize() {\r\n    for (const editor of this.editors) {\r\n      editor.layout();\r\n    }\r\n  }\r\n\r\n  runCodeEditor() {\r\n    if (this.state.loaded) {\r\n      const output = this.emotion.execute(this.state.editorCode, this.state.editorArguments);\r\n      this.setState({\r\n        editorOutput: output\r\n      });\r\n    }\r\n  }\r\n\r\n  runCodeInterpreter() {\r\n    if (this.state.loaded) {\r\n      const output = this.emotion.interpret(this.state.interpreterCode, this.state.interpreterArguments);\r\n      this.setState({\r\n        interpreterOutput: output\r\n      });\r\n    }\r\n  }\r\n\r\n  mutateEditor(monaco) {\r\n    this.hack = monaco;\r\n    monaco.editor.defineTheme('emotion', {\r\n      base: 'vs',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'keyword', foreground: '0000ff' },\r\n      ]\r\n    });\r\n    monaco.languages.register({\r\n      id: \"elang\"\r\n    });\r\n  }\r\n\r\n  getCodeBytes(code) {\r\n    return [...code].length;\r\n  }\r\n\r\n  updateMode(mode) {\r\n    if (forcePageReladSinceTheEditorSucksAndHasSuperAnnoyingIssuesWithAutomaticResize) {\r\n      this.state.mode = mode;\r\n      this.injectStateUrl();\r\n      window.location.reload();\r\n      return;\r\n    }\r\n    this.setState({\r\n      mode: mode\r\n    });\r\n  }\r\n\r\n  generateStackExchange() {\r\n    if (!this.state.loaded) {\r\n      return \"\";\r\n    }\r\n    const result = [];\r\n    const compiled = this.emotion.compile(this.state.editorCode);\r\n    if (compiled.program !== undefined) {\r\n      let baseUrl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\r\n      if (!baseUrl.endsWith(\"/\")) {\r\n        baseUrl += \"/\";\r\n      }\r\n      const codepageUrl = baseUrl + \"?state=\" + this.encodeState({ mode: \"codepage\" });\r\n      const tryItUrl = baseUrl + \"?state=\" + this.encodeState({ mode: \"interpreter\", interpreterCode: compiled.program, interpreterArguments: this.state.editorArguments });\r\n      result.push(\"# [Emotion][1], \" + this.getCodeBytes(compiled.program) + \" [bytes][2]\");\r\n      result.push(\"\");\r\n      result.push(\"    \" + compiled.program);\r\n      result.push(\"Explanation\");\r\n      result.push(\"\");\r\n      for (const line of compiled.explanation) {\r\n        result.push(\"    \" + line);\r\n      }\r\n      result.push(\"\");\r\n      result.push(\"[Try it online!][3]\");\r\n      result.push(\"\");\r\n      result.push(\"\");\r\n      result.push(\"  [1]: https://github.com/Quantum64/Emotion\");\r\n      result.push(\"  [2]: \" + codepageUrl);\r\n      result.push(\"  [3]: \" + tryItUrl);\r\n    } else {\r\n      result.push(\"Program did not compile!\");\r\n    }\r\n    return result.join(\"\\n\");\r\n  }\r\n\r\n  getEditorContent() {\r\n    let code = this.state.editorCode;\r\n    let result = \"Initializing Engine...\";\r\n    let bytes = 0;\r\n    if (this.state.loaded) {\r\n      const time = performance.now();\r\n      const compiled = this.emotion.compile(code);\r\n      result = compiled.output;\r\n      if (compiled.program !== undefined) {\r\n        bytes = this.getCodeBytes(compiled.program);\r\n      }\r\n      console.log(\"Compiled code in \" + (performance.now() - time) + \" milliseconds.\")\r\n    }\r\n\r\n    const options = { selectOnLineNumbers: true, automaticLayout: automaticLayout };\r\n    const optionsArguments = { ...options, minimap: { enabled: false } }\r\n    const optionsDisabled = { ...optionsArguments, readOnly: true }\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container direction=\"column\" spacing={0} style={{ height: \"100%\" }}>\r\n          <Grid item>\r\n            <Typography variant=\"h6\">\r\n              Code ({bytes} bytes)\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <MonacoEditor width=\"100%\" height=\"100%\" language=\"elang\" theme=\"emotion\"\r\n              value={code}\r\n              options={options}\r\n              onChange={(value, event) => {\r\n                this.setState({\r\n                  editorCode: value\r\n                });\r\n              }}\r\n              editorWillMount={(editor) => this.mutateEditor(editor)}\r\n            />\r\n          </Grid>\r\n          <br />\r\n          <Grid item>\r\n            <Typography variant=\"h6\">\r\n              Compiler Output\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <MonacoEditor width=\"100%\" height=\"100%\" language=\"text\" theme=\"emotion\"\r\n              value={result}\r\n              options={optionsDisabled}\r\n            />\r\n          </Grid>\r\n          <br />\r\n          <Grid item xs>\r\n            <Grid container style={{ height: \"100%\" }}>\r\n              <Grid item xs>\r\n                <Grid container direction=\"column\" spacing={0} style={{ height: \"100%\" }}>\r\n                  <Grid item>\r\n                    <Grid container direction=\"row\" alignItems=\"center\" spacing={2} style={{ padding: 5 }}>\r\n                      <Grid item>\r\n                        <Typography variant=\"h6\">\r\n                          Program Output\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.runCodeEditor()}>\r\n                          Run Code\r\n                        </Button>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => {\r\n                          this.setState({\r\n                            editorGeneratedOpen: true\r\n                          });\r\n                        }}>\r\n                          Generate StackExchange\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <MonacoEditor width=\"100%\" height=\"100%\" language=\"text\" theme=\"emotion\"\r\n                      value={this.state.editorOutput}\r\n                      options={optionsDisabled}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <Grid container direction=\"column\" spacing={0} style={{ height: \"100%\" }}>\r\n                  <Grid item>\r\n                    <Grid container direction=\"row\" alignItems=\"center\" spacing={2} style={{ padding: 5 }}>\r\n                      <Grid item>\r\n                        <Typography variant=\"h6\">\r\n                          Arguments\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <MonacoEditor width=\"100%\" height=\"100%\" language=\"text\" theme=\"emotion\"\r\n                      value={this.state.editorArguments}\r\n                      options={optionsArguments}\r\n                      onChange={(value, event) => {\r\n                        this.setState({\r\n                          editorArguments: value\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <GeneratedAnswer\r\n          selectedValue={this.state.selectedValue}\r\n          open={this.state.editorGeneratedOpen}\r\n          onClose={() => {\r\n            this.setState({\r\n              editorGeneratedOpen: false\r\n            });\r\n          }}\r\n          value={() => this.generateStackExchange()}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getInterpreterContent() {\r\n    const code = this.state.interpreterCode;\r\n    const args = this.state.interpreterArguments;\r\n    //let result = \"Initializing Engine...\";\r\n    //let bytes = 0;\r\n    const bytes = this.getCodeBytes(code);\r\n\r\n    const options = { selectOnLineNumbers: true, automaticLayout: automaticLayout };\r\n    const optionsArguments = { ...options, minimap: { enabled: false } }\r\n    const optionsDisabled = { ...optionsArguments, readOnly: true }\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container direction=\"column\" spacing={0} style={{ height: \"100%\" }}>\r\n          <Grid item>\r\n            <Typography variant=\"h6\">\r\n              Code ({bytes} bytes)\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <MonacoEditor width=\"100%\" height=\"100%\" language=\"elang\" theme=\"emotion\"\r\n              value={code}\r\n              options={options}\r\n              onChange={(value, event) => {\r\n                this.setState({\r\n                  interpreterCode: value\r\n                });\r\n              }}\r\n              editorWillMount={(editor) => this.mutateEditor(editor)}\r\n            />\r\n          </Grid>\r\n          <br />\r\n          <Grid item>\r\n            <Typography variant=\"h6\">\r\n              Arguments\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <MonacoEditor width=\"100%\" height=\"100%\" language=\"text\" theme=\"emotion\"\r\n              value={args}\r\n              options={optionsArguments}\r\n              onChange={(value, event) => {\r\n                this.setState({\r\n                  interpreterArguments: value\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <br />\r\n          <Grid item>\r\n            <Grid container direction=\"row\" alignItems=\"center\" spacing={2} style={{ padding: 5 }}>\r\n              <Grid item>\r\n                <Typography variant=\"h6\">\r\n                  Output\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.runCodeInterpreter()}>\r\n                  Run Code\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <MonacoEditor width=\"100%\" height=\"100%\" language=\"text\" theme=\"emotion\"\r\n              value={this.state.interpreterOutput}\r\n              options={optionsDisabled}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getDecompileContent() {\r\n    let code = this.state.decompilerProgram;\r\n    let result = \"Initializing Engine...\";\r\n    if (this.state.loaded) {\r\n      result = this.emotion.decompile(code);\r\n    }\r\n\r\n    const options = { selectOnLineNumbers: true, automaticLayout: automaticLayout };\r\n    const optionsArguments = { ...options, minimap: { enabled: false } }\r\n    const optionsDisabled = { ...optionsArguments, readOnly: true }\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container direction=\"column\" spacing={0} style={{ height: \"100%\" }}>\r\n          <Grid item>\r\n            <Typography variant=\"h6\">\r\n              Program\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <MonacoEditor width=\"100%\" height=\"100%\" language=\"text\" theme=\"emotion\"\r\n              value={code}\r\n              options={options}\r\n              onChange={(value, event) => this.setState({\r\n                decompilerProgram: value\r\n              })}\r\n              editorWillMount={(editor) => this.mutateEditor(editor)}\r\n            />\r\n          </Grid>\r\n          <br />\r\n          <Grid item>\r\n            <Typography variant=\"h6\">\r\n              Lexer Output\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <MonacoEditor width=\"100%\" height=\"100%\" language=\"elang\" theme=\"emotion\"\r\n              value={result}\r\n              options={optionsDisabled}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getReferenceContent() {\r\n    const rows = [];\r\n    if (this.state.loaded) {\r\n      for (let opcode of this.emotion.getOpcodes()) {\r\n        if (!this.isValidOpcode(opcode)) {\r\n          continue;\r\n        }\r\n        rows.push(\r\n          <TableRow key={opcode}>\r\n            <TableCell>\r\n              {opcode}\r\n            </TableCell>\r\n            <TableCell>\r\n              {this.emotion.getOpcodeDescription(opcode)}\r\n            </TableCell>\r\n          </TableRow>);\r\n      }\r\n    } else {\r\n      rows.push(\r\n        <TableRow key=\"loading\">\r\n          <TableCell>\r\n            Loading\r\n          </TableCell>\r\n          <TableCell>\r\n            The engine has not fully loaded yet.\r\n          </TableCell>\r\n        </TableRow>);\r\n    }\r\n    return (\r\n      <div>\r\n        <Typography variant=\"h2\" style={{ color: \"grey\" }}>\r\n          Emotion Reference\r\n        </Typography>\r\n        I may write a programming guide at some point when I have time... but for now just try sticking the below opcodes in the compiler and see what happens.\r\n        <Paper>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Opcode</TableCell>\r\n                <TableCell>Description</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows}\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getCodepageContent() {\r\n    const rows = [];\r\n    if (this.state.loaded) {\r\n      let index = 0;\r\n      for (let character of this.emotion.getCodepage()) {\r\n        rows.push(\r\n          <TableRow key={character}>\r\n            <TableCell>\r\n              {index}\r\n            </TableCell>\r\n            <TableCell>\r\n              0x{index.toString(16)}\r\n            </TableCell>\r\n            <TableCell>\r\n              {character}\r\n            </TableCell>\r\n          </TableRow>);\r\n        index++;\r\n      }\r\n    } else {\r\n      rows.push(\r\n        <TableRow key=\"loading\">\r\n          <TableCell>\r\n            Loading Engine\r\n          </TableCell>\r\n        </TableRow>);\r\n    }\r\n    return (\r\n      <div>\r\n        <Typography variant=\"h2\" style={{ color: \"grey\" }}>\r\n          Codepage\r\n        </Typography>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          The codepage is comprised of 256 emoji, each representing one byte.\r\n        </Typography>\r\n        <Paper>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Id</TableCell>\r\n                <TableCell>Hex</TableCell>\r\n                <TableCell>Character</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows}\r\n            </TableBody>\r\n          </Table>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getToolsContent() {\r\n    return (\r\n      <div>\r\n        <Typography variant=\"h5\">\r\n          Remove Newlines\r\n        </Typography>\r\n        <TextField\r\n          id=\"outlined-textarea\"\r\n          label=\"Paste Here\"\r\n          value={this.state.toolsRemoveNewlines}\r\n          multiline\r\n          fullWidth\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          onChange={(event) => {\r\n            this.setState({\r\n              toolsRemoveNewlines: event.target.value.replace(/\\n/g, \"\\\\n\")\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    this.injectStateUrl();\r\n\r\n    let content = null;\r\n    switch (this.state.mode) {\r\n      case \"interpreter\":\r\n        content = this.getInterpreterContent();\r\n        break;\r\n      case \"compiler\":\r\n        content = this.getEditorContent();\r\n        break;\r\n      case \"reference\":\r\n        content = this.getReferenceContent();\r\n        break;\r\n      case \"lexer\":\r\n        content = this.getDecompileContent();\r\n        break;\r\n      case \"codepage\":\r\n        content = this.getCodepageContent();\r\n        break;\r\n      case \"tools\":\r\n        content = this.getToolsContent();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    const modes = [\"interpreter\", \"compiler\", \"lexer\", \"tools\", \"reference\", \"codepage\"];\r\n    const buttons = [];\r\n    for (let mode of modes) {\r\n      buttons.push(\r\n        <Grid item key={mode}>\r\n          <Button variant=\"outlined\" size=\"small\" color=\"default\" style={{ color: \"white\" }} onClick={() => this.updateMode(mode)}>\r\n            {mode}\r\n          </Button>\r\n        </Grid>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div style={{ height: \"100%\" }}>\r\n        <CssBaseline />\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Grid container spacing={2} alignItems=\"center\">\r\n              <Grid item>\r\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                  Emotion\r\n                </Typography>\r\n              </Grid>\r\n              {buttons}\r\n            </Grid>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Grid container justify=\"center\" style={{ padding: 20, height: \"90%\" }}>\r\n          <Grid item xs>\r\n            {content}\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nclass GeneratedAnswer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.props.onClose(this.props.selectedValue);\r\n  };\r\n\r\n  render() {\r\n    const { classes, onClose, selectedValue, ...other } = this.props;\r\n\r\n    return (\r\n      <Dialog fullWidth onClose={this.handleClose} aria-labelledby=\"simple-dialog-title\" {...other}>\r\n        <DialogTitle id=\"simple-dialog-title\">Generated StackExchange Answer</DialogTitle>\r\n        <div style={{ padding: 10 }}>\r\n          <TextField\r\n            id=\"outlined-textarea\"\r\n            label=\"Copy Me!\"\r\n            multiline\r\n            fullWidth\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            value={this.props.value()}\r\n          />\r\n        </div>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'typeface-roboto';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}